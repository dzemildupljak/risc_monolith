{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Documentation of our awesome API.",
    "version": "1.0.0"
  },
  "host": "serene-fortress-45917.herokuapp.com",
  "basePath": "/v1",
  "paths": {
    "/admin": {
      "get": {
        "description": "You receive an list of users",
        "tags": [
          "Admin"
        ],
        "operationId": "ListCompleteUsers",
        "responses": {
          "200": {
            "$ref": "#/responses/userListCompleteResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "description": "Need to send new password",
        "tags": [
          "Auth"
        ],
        "operationId": "ForgotPassword",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "x-go-name": "Code"
                },
                "email": {
                  "type": "string",
                  "x-go-name": "Email"
                },
                "new_password": {
                  "type": "string",
                  "x-go-name": "New_password"
                },
                "new_password_second": {
                  "type": "string",
                  "x-go-name": "New_password_second"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/auth/forgot-password-code": {
      "post": {
        "description": "Need to send new password",
        "tags": [
          "Auth"
        ],
        "operationId": "ForgotPasswordCode",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "x-go-name": "Email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "description": "Get acces to other parts of aplication\nGet tokens for next requests",
        "tags": [
          "Auth"
        ],
        "operationId": "Login",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "x-go-name": "Email"
                },
                "password": {
                  "type": "string",
                  "x-go-name": "Password"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/authResponse"
          },
          "401": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "description": "Create new user with adequate data",
        "tags": [
          "Auth"
        ],
        "operationId": "Signup",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "x-go-name": "Email"
                },
                "name": {
                  "type": "string",
                  "x-go-name": "Name"
                },
                "password": {
                  "type": "string",
                  "x-go-name": "Password"
                },
                "username": {
                  "type": "string",
                  "x-go-name": "Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "401": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/donation/donation": {
      "get": {
        "description": "You receive an list of donation events",
        "tags": [
          "Donation"
        ],
        "operationId": "ListDonation",
        "responses": {
          "200": {
            "$ref": "#/responses/donationListResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/donor/": {
      "post": {
        "description": "You create an donor for given values",
        "tags": [
          "Donor"
        ],
        "operationId": "CreateNewDonor",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "donor_address": {
                  "type": "string",
                  "x-go-name": "DonorAddress"
                },
                "donor_blood_type": {
                  "type": "string",
                  "x-go-name": "DonorBloodType"
                },
                "donor_blood_type_num": {
                  "type": "integer",
                  "format": "int16",
                  "x-go-name": "DonorBloodTypeNum"
                },
                "donor_last_donation": {
                  "type": "string",
                  "format": "date-time",
                  "x-go-name": "DonorLastDonationDate"
                },
                "donor_name": {
                  "type": "string",
                  "x-go-name": "DonorName"
                },
                "donor_phone_number": {
                  "type": "string",
                  "x-go-name": "DonorPhoneNumber"
                },
                "donor_surname": {
                  "type": "string",
                  "x-go-name": "DonorSurname"
                },
                "donor_unique_identification_number": {
                  "type": "string",
                  "x-go-name": "DonorUniqueIdentificationNumber"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/donor/blood-type/{blood_type}": {
      "get": {
        "description": "You receive an donor for given id",
        "tags": [
          "Donor"
        ],
        "operationId": "DonorByBloodType",
        "responses": {
          "200": {
            "$ref": "#/responses/donorResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/donor/donors": {
      "get": {
        "description": "You receive an list of donors",
        "tags": [
          "Donor"
        ],
        "operationId": "ListDonors",
        "responses": {
          "200": {
            "$ref": "#/responses/donorListResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/donor/unique": {
      "post": {
        "description": "You receive an donor for given Unique Number",
        "tags": [
          "Donor"
        ],
        "operationId": "DonorByUniqueNumber",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "unique_number": {
                  "type": "string",
                  "x-go-name": "UniqueNumber"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/donorResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/donor/{donor_id}": {
      "get": {
        "description": "You receive an donor",
        "tags": [
          "Donor"
        ],
        "operationId": "DonorById",
        "responses": {
          "200": {
            "$ref": "#/responses/donorResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/get-password-reset-code": {
      "get": {
        "description": "You receive an email with a code to change the password",
        "tags": [
          "Auth"
        ],
        "operationId": "GeneratePasswordResetCode",
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/oauth/google/login": {
      "get": {
        "description": "Need to send request for google account check",
        "tags": [
          "OAuth"
        ],
        "operationId": "OauthGoogleLogin",
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "401": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/password-reset": {
      "post": {
        "description": "Need to send old pass/code/new_password",
        "tags": [
          "Auth"
        ],
        "operationId": "ResetPassword",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "x-go-name": "Code"
                },
                "new_password": {
                  "type": "string",
                  "x-go-name": "New_password"
                },
                "new_password_second": {
                  "type": "string",
                  "x-go-name": "New_password_second"
                },
                "old_password": {
                  "type": "string",
                  "x-go-name": "Old_password"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/refresh-token": {
      "get": {
        "description": "Send request within refresh-token to get new access-token",
        "tags": [
          "Auth"
        ],
        "operationId": "RefreshToken",
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "401": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/set-password": {
      "post": {
        "description": "Need to send old pass/code/new_password",
        "tags": [
          "Auth"
        ],
        "operationId": "SetNewPassword",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "new_password": {
                  "type": "string",
                  "x-go-name": "New_password"
                },
                "new_password_second": {
                  "type": "string",
                  "x-go-name": "New_password_second"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/user/current": {
      "get": {
        "description": "You receive an user with id from JWT",
        "tags": [
          "User"
        ],
        "operationId": "CurrentUser",
        "responses": {
          "200": {
            "$ref": "#/responses/userResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/user/users": {
      "get": {
        "description": "You receive an list of users",
        "tags": [
          "User"
        ],
        "operationId": "ListUsers",
        "responses": {
          "200": {
            "$ref": "#/responses/userListResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/user/{user_id}": {
      "get": {
        "description": "You receive an list of users",
        "tags": [
          "User"
        ],
        "operationId": "GetUserById",
        "responses": {
          "200": {
            "$ref": "#/responses/userResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      },
      "put": {
        "description": "You receive an list of users",
        "tags": [
          "User"
        ],
        "operationId": "UpdateUserById",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "addres": {
                  "type": "string",
                  "x-go-name": "Address"
                },
                "name": {
                  "type": "string",
                  "x-go-name": "Name"
                },
                "username": {
                  "type": "string",
                  "x-go-name": "Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/userResponse"
          },
          "500": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    },
    "/verify/mail": {
      "get": {
        "description": "Recieve mail with a:href to verify email addres",
        "tags": [
          "Auth"
        ],
        "operationId": "VerifyMail",
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "401": {
            "$ref": "#/responses/genericResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "AuthResponse": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "x-go-name": "AccessToken"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "refresh_token": {
          "type": "string",
          "x-go-name": "RefreshToken"
        }
      },
      "x-go-package": "_/home/dzemil/Projects/golang/risc_monolith/server/utils"
    },
    "GenericResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "x-go-name": "Data"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "status": {
          "type": "boolean",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "_/home/dzemil/Projects/golang/risc_monolith/server/utils"
    },
    "NullInt32": {
      "description": "NullInt32 implements the Scanner interface so\nit can be used as a scan destination, similar to NullString.",
      "type": "object",
      "title": "NullInt32 represents an int32 that may be null.",
      "properties": {
        "Int32": {
          "type": "integer",
          "format": "int32"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "database/sql"
    },
    "NullTime": {
      "description": "NullTime implements the Scanner interface so\nit can be used as a scan destination, similar to NullString.",
      "type": "object",
      "title": "NullTime represents a time.Time that may be null.",
      "properties": {
        "Time": {
          "type": "string",
          "format": "date-time"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "database/sql"
    },
    "showDonation": {
      "type": "object",
      "properties": {
        "event_end_date": {
          "$ref": "#/definitions/NullTime"
        },
        "event_location": {
          "type": "string",
          "x-go-name": "EventLocation"
        },
        "event_name": {
          "type": "string",
          "x-go-name": "EventName"
        },
        "event_number_blood_donors": {
          "$ref": "#/definitions/NullInt32"
        },
        "event_organization": {
          "type": "string",
          "x-go-name": "EventOrganization"
        },
        "event_organizer": {
          "type": "string",
          "x-go-name": "EventOrganizer"
        },
        "event_start_date": {
          "$ref": "#/definitions/NullTime"
        }
      },
      "x-go-package": "_/home/dzemil/Projects/golang/risc_monolith/server/utils"
    },
    "showDonor": {
      "type": "object",
      "properties": {
        "donor_address": {
          "type": "string",
          "x-go-name": "DonorAddress"
        },
        "donor_blood_type": {
          "type": "string",
          "x-go-name": "DonorBloodType"
        },
        "donor_blood_type_num": {
          "type": "integer",
          "format": "int16",
          "x-go-name": "DonorBloodTypeNum"
        },
        "donor_last_donation": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DonorLastDonationDate"
        },
        "donor_name": {
          "type": "string",
          "x-go-name": "DonorName"
        },
        "donor_phone_number": {
          "type": "string",
          "x-go-name": "DonorPhoneNumber"
        },
        "donor_surname": {
          "type": "string",
          "x-go-name": "DonorSurname"
        },
        "donor_unique_identification_number": {
          "type": "string",
          "x-go-name": "DonorUniqueIdentificationNumber"
        }
      },
      "x-go-package": "_/home/dzemil/Projects/golang/risc_monolith/server/utils"
    },
    "showUsers": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "isverified": {
          "type": "boolean",
          "x-go-name": "Isverified"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "_/home/dzemil/Projects/golang/risc_monolith/server/utils"
    },
    "user": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "x-go-name": "AccessToken"
        },
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "createdat": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Createdat"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "isverified": {
          "type": "boolean",
          "x-go-name": "Isverified"
        },
        "mail_verfy_code": {
          "type": "string",
          "x-go-name": "MailVerfyCode"
        },
        "mail_verfy_expire": {
          "$ref": "#/definitions/NullTime"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "oauth_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "OauthID"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "password_verfy_code": {
          "type": "string",
          "x-go-name": "PasswordVerfyCode"
        },
        "password_verfy_expire": {
          "$ref": "#/definitions/NullTime"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role"
        },
        "tokenhash": {
          "type": "string",
          "x-go-name": "Tokenhash"
        },
        "updatedat": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updatedat"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "_/home/dzemil/Projects/golang/risc_monolith/server/utils"
    }
  },
  "responses": {
    "authResponse": {
      "description": "AuthResponse",
      "schema": {
        "$ref": "#/definitions/AuthResponse"
      }
    },
    "donationListResponse": {
      "description": "List of donations with basic info",
      "schema": {
        "type": "object",
        "properties": {
          "Donors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/showDonation"
            }
          }
        }
      }
    },
    "donorListResponse": {
      "description": "List of donors with basic info",
      "schema": {
        "type": "object",
        "properties": {
          "Donors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/showDonor"
            }
          }
        }
      }
    },
    "donorResponse": {
      "description": "Donor with basic info",
      "schema": {
        "type": "object",
        "properties": {
          "Donor": {
            "$ref": "#/definitions/showDonor"
          }
        }
      }
    },
    "genericResponse": {
      "description": "This text will appear as description of your response body.",
      "schema": {
        "$ref": "#/definitions/GenericResponse"
      }
    },
    "userListCompleteResponse": {
      "description": "List of users with complete info",
      "schema": {
        "type": "object",
        "properties": {
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "userListResponse": {
      "description": "List of users with basic info",
      "schema": {
        "type": "object",
        "properties": {
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/showUsers"
            }
          }
        }
      }
    },
    "userResponse": {
      "description": "User with basic info",
      "schema": {
        "type": "object",
        "properties": {
          "User": {
            "$ref": "#/definitions/showUsers"
          }
        }
      }
    },
    "validationError": {
      "description": "A ValidationError is an error that is used when the required input fails validation.",
      "schema": {
        "type": "object",
        "properties": {
          "FieldName": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          }
        }
      }
    },
    "validationErrors": {
      "description": "A ValidationError is an error that is used when the required input fails validation.",
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "FieldName": {
              "type": "string"
            },
            "Message": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    }
  }
}